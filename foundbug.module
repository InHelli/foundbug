<?php


define('CUSTOM_BUG_PATH', 'public://foundbug_files/bugs/');
module_load_include('inc', 'foundbug', 'inc/foundbug.entity');
/**
 * @file
 * Basic functional of the foundbug module
 *
 * @param $path
 * @param $arg
 * @return string
 */
function foundbug_help($path, $arg) {
  switch ($path) {
    case "admin/help#foundbug":
      return '<p>' . t("Foundbug help needed here") . '</p>';
      break;
  }
}

/*
 * Implements hook_menu
 */
function foundbug_menu() {


  $items = array();
  $items['admin/settings/foundbug'] = array(
    'title' => 'Foundbug',
    'description' => t('Admin foundbug'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('foundbug_admin_form'),
    'access arguments' => array('administer bugreport entities'),
    'type' => MENU_NORMAL_ITEM,
    'file'=>'foundbug.admin.inc',
    'file path'=>drupal_get_path('module','foundbug').'/inc',
  );
  $items['foundbug/form/%ctools_js'] = array(
    'page callback' => 'foundbug_callback',
    'page arguments' => array(2),
    'access arguments' => array('create any bugreport'),
    'type' => MENU_CALLBACK,

  );
  $items['admin/structure/foundbug/manage'] = array(
    'title' => 'Administer foundbugs',
    'page callback' => 'foundbug_list',
    'access arguments' => array('administer bugreport entities'),
  );
  $items['foundbug/report/%bugreport'] = array(
    //'title callback' => 'entity_example_basic_title',
    //'title arguments' => array(2),
    'page callback' => 'bugreport_view',
    'page arguments' => array(2),
    'access arguments' => array('view any bugreport entity'),
  );

  $items['foundbug/report/%bugreport/fix'] = array(
    //'title callback' => 'entity_example_basic_title',
    //'title arguments' => array(2);
    'page callback' => 'bugreport_fix',
    'page arguments' => array(2, 4),
    'access arguments' => array('administer bugreport entities'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'delivery callback' => 'ajax_deliver',
  );
  $items['foundbug/report/%bugreport/delete'] = array(
    //'title callback' => 'entity_example_basic_title',
    //'title arguments' => array(2);
    'page callback' => 'bugreport_delete',
    'page arguments' => array(2),
    'access arguments' => array('administer bugreport entities'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'delivery callback' => 'ajax_deliver',
  );
  return $items;
}


/*
 * Implements hook_permission()
 */
function foundbug_permission() {
  $permissions = array(
    'administer bugreport entities' => array(
      'title' => t('Administer bugreport entities'),
    ),
    'view any bugreport' => array(
      'title' => t('View any bugreport entity'),
    ),
    'edit any bugreport' => array(
      'title' => t('Edit any bugreport entity'),
    ),
    'create any bugreport' => array(
      'title' => t('Create bugreport Entities'),
    ),
  );
  return $permissions;
}



/*
 * popup the form to send bugreport
 */
function foundbug_callback($ajax) {


  ctools_include('ajax');

  ctools_include('modal');

  $form_state = array(
    'ajax' => TRUE,
    'title' => t('Send bug'),
  );


  $output = array();
  $output = ctools_modal_form_wrapper('foundbug_send_form', $form_state);

  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
  }


  print ajax_render($output);
  //drupal_exit();

}


/**
 *
 * Implements hook_page_build()
 *
 */
function foundbug_page_build(&$page) {
  if (!user_access('create any bugreport')) {
    return;
  }
  ctools_include('modal');
  ctools_modal_add_js();
  drupal_add_js(drupal_get_path('module', 'foundbug') . '/JS/foundbug.js');
  drupal_add_js(array(
    'bug-style' => array(
      'modalSize' => array(
        'type' => 'relative',
        'width' => 'auto',
        'height' => 'auto',
        'addWidth' => 10,
        'addHeight' => 10,
        'contentRight' => 0,
        'contentBottom' => 0,
      ),
      //Animation mode
      'animation' => 'fadeIn',
    ),
  ), 'setting');
  $block_class = 'foundbug_block_';
  $block_class .= variable_get('foundbug_position_side', 'left');
  $block_offset = variable_get('foundbug_position_tdside', 'top') . ':' . variable_get('foundbug_offset_y', '50') . '%';

  $block = foundbug_block_view('foundbug');
  $content = $block['content'];
  $blockcolor = variable_get('foundbug_blockcolor', '');
  $page['content']['foundbug'] = array(
    '#prefix'=>'<div id = "foundbug_block" class="' . $block_class . '" style="background-color: #' . $blockcolor . '; ' . $block_offset . ';">',
    '#markup' =>$content,
     '#sufix'=> '</div>',
  );

}


/**
 *
 * @param string $delta 'type of block view '
 * @return array 'block view'
 */
function foundbug_block_view($delta = '') {
  $blocks = array();

  switch ($delta) {
    case 'foundbug': {
      if (user_access('create any bugreport')) {
        ctools_include('modal');
        ctools_modal_add_js();

        $bugpath = variable_get('foundbug_imgpath', ' ');
        $blocks['subject'] = t('');
        $blocks['content'] = l('<img class="bug-button" src = "' . $bugpath . '">', '/foundbug/form/nojs', array(
          'attributes' => array('class' => array('ctools-use-modal ctools-modal-bug-style')),
          'html' => TRUE
        )); /// $entries

        drupal_add_css(drupal_get_path('module', 'foundbug') . '/CSS/foundbug.css');
      }
    }
  }

  return $blocks;
}

/*
 * implement hook_theme
 */
function foundbug_theme() {
  return array(
    'foundbug_block' => array(
      'variables' => array(
        'form' => NULL
      ),
      'template' => 'foundbug-block',
    ),

  );
}

/*
 * Form submit handler: Submits foundbug_send_form.
 */
function foundbug_send_form_submit($form, &$form_state) {

  //create new bugreport
  $report = check_plain($form_state['values']['text']);
  $email = $form_state['values']['email'];
  $name = check_plain($form_state['values']['name']);

  $parameters = array(
    'body' => $report,
    'email' => $email,
    'name' => $name,
    'env' => t(' User agent: ' . getenv('HTTP_USER_AGENT') . ' Remote adress: ' . getenv('REMOTE_ADDR')),
    'path' => '',

  );
  $file = $form_state['values']['file'];
  if (!empty($file)) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    $parameters['path'] = $file->uri;
  }


  $myEnt = entity_create('bugreport', $parameters);
  entity_get_controller('bugreport')->save($myEnt);
  if(variable_get('foundbug_is_notice_need',0)) {
    $to = variable_get('foundbug_mail_to_send', variable_get('site_mail', 'mail'));
    $from = variable_get('site_name','site');
    $language = language_default();
    $params = $form_state;
    $params['message'] = 'NEW BUG. ';
    $params['message'].= check_plain($form_state['values']['text']) . " ";
    drupal_mail('foundbug', 'newbug', $from, $language, $params, $from, TRUE);
  }
  $html = l('<div class = "ok_button"> OK </div>','#',array(
    'attributes' => array('class' => array('ctools-close-modal')),
    'html' => TRUE
  ));
  $commands[] = ctools_modal_command_display('Bug sended', $html);
  print ajax_render($commands);
  exit;

}


/*
 * implements form_validate_hook()
 */
function foundbug_send_form_validate($form, &$form_state) {


  if (empty($form_state['values']['name'])) {
    form_set_error('name', t('You have not input name.'));
  }

  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('You have input invalid email.'));
  }

  if (empty($form_state['values']['text'])) {
    form_set_error('text', t('You have not input bugreport.'));
  }

  $validators = array(
    'file_validate_is_image' => array(), // Check: Image
    'file_validate_extensions' => array('png gif jpg jpeg'), // Check: Ext
    'file_validate_size' => array(3 * 1024 * 1024), // Check: Size
  );

  if ($file = file_save_upload('file', $validators, 'public://foundbug_files')) {
    $form_state['values']['file'] = $file; //
  }


}


/*
 * Form for popup ctools
 */
function foundbug_send_form($form, &$form_state) {

  $form = array(
    '#attributes' => array('enctype' => 'multipart/form-data'),
  );

  global $user;


  $form['name'] = array(
    '#type' => 'textfield',
    '#size' => '30',
    '#title' => t('Name'),
    '#label' => 'Name:',
    //'#default_value' => ' ',
    //'#disabled' => TRUE,
  );
  if (!empty($user->name)) {
    $form['name']['#default_value'] = $user->name;
  }
  $form['email'] = array(
    '#type' => 'textfield',
    '#size' => '30',
    '#title' => t('Email'),
    '#label' => 'Email:',
  );
  $form['text'] = array(
    '#title' => t('Bugreport'),
    '#type' => 'textarea',
    '#size' => '120',
    '#label' => 'Bugreport:',
  );
  $form['file'] = array(
    '#type' => 'file',
    '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif'),

  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),

  );
  return $form;
}

/*
 * implements hook_mail
*/
function foundbug_mail($key, &$message, $params) {
  switch ($key) {
    case 'welcome': {
      $message['to'] = t('inhellimaybo@gmail.com');
      $message['subject'] = t('Hello');
      $message['body'][] = t($params['message']);
      break;
    }
    case 'newbug': {
      $message['to'] = t('Admin');
      $message['subject'] = t('New bug!');
      if (!empty($params['message'])) {
        $message['body'][] = t($params['message']);
      }
      break;
    }
  }
}
