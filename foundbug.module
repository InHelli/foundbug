<?php

/*
 * Help of module
 */
function foundbug_help($path, $arg) {
  switch ($path) {
    case "admin/help#foundbug":
      return '<p>' . t("Foundbug help needed here") . '</p>';
      break;
  }
}


function foundbug_menu() {

  $items = array();
  $items['foundbug/debug'] = array(
    'page callback' => 'foundbug_debug',
    'access arguments' => array('administer bugreport entities'),
    'type' => MENU_CALLBACK,
  );
  $items['foundbug/form/%ctools_js'] = array(
    'page callback' => 'foundbug_callback',
    'page arguments' => array(2),
    'access arguments' => array('create any bugreport'),
    'type' => MENU_CALLBACK,

  );

  $items['admin/structure/foundbug/manage'] = array(
    'title' => 'Administer foundbugs',
    'page callback' => 'foundbug_list',
    'access arguments' => array('administer bugreport entities'),
  );
  $items['foundbug/report/%bugreport'] = array(
    //'title callback' => 'entity_example_basic_title',
    //'title arguments' => array(2),
    'page callback' => 'bugreport_view',
    'page arguments' => array(2),
    'access arguments' => array('view any bugreport entity'),
  );

  $items['foundbug/report/%bugreport/fix'] = array(
    //'title callback' => 'entity_example_basic_title',
    //'title arguments' => array(2);
    'page callback' => 'bugreport_fix',
    'page arguments' => array(2,4),
    'access arguments' => array('administer bugreport entities'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'delivery callback' => 'ajax_deliver',
  );
  $items['foundbug/report/%bugreport/delete'] = array(
    //'title callback' => 'entity_example_basic_title',
    //'title arguments' => array(2);
    'page callback' => 'bugreport_delete',
    'page arguments' => array(2),
    'access arguments' => array('administer bugreport entities'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'delivery callback' => 'ajax_deliver',
  );
  return $items;
}

function foundbug_permission() {
  $permissions = array(
    'administer bugreport entities' => array(
      'title' => t('Administer bugreport entities'),
    ),
    'view any bugreport' => array(
      'title' => t('View any bugreport entity'),
    ),
    'edit any bugreport' => array(
      'title' => t('Edit any bugreport entity'),
    ),
    'create any bugreport' => array(
      'title' => t('Create bugreport Entities'),
    ),
  );
  return $permissions;
}

function foundbug_debug() {



}


function foundbug_list() {
  if(!user_access('administer bugreport entities'))  drupal_access_denied(); return;
  $content = array();
  // Load all of our entities.
  $entities = bugreport_load_multiple();
  if (!empty($entities)) {
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.form');
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $fix = 'fix';
      if($entity->fixed==0)
      {
        $fix = '<div id='.$entity->id.' class="foundbug_fix">fix</div>';
      }else{
        $fix = '<div  id='.$entity->id.' class="foundbug_fixed">fixed</div>';
      }

      $rows[] = array(
        'data' => array(
          'id' => $entity->id,
          'body' => l($entity->body, 'foundbug/report/' . $entity->id),
          'fix' => l($fix, 'foundbug/report/' . $entity->id . '/fix',array('attributes' => array('class' => array('use-ajax')),'html'=>true)),
          'delete' => l('<div class ="foundbug_delete">delete</div>', 'foundbug/report/' . $entity->id . '/delete',array('attributes' => array('class' => array('use-ajax')),'html'=>true))
        ),
      'id'=>array('id_'.$entity->id),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Body'), t('Fix'),t('Delete')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No bugreport entities currently exist.'),
    );
  }
  return $content;
}

function foundbug_callback($ajax) {

  ctools_include('ajax');

  ctools_include('modal');

  $form_state = array(
    'ajax' => TRUE,
    'title' => t('Send bug'),
  );

  $output = array();
  $output = ctools_modal_form_wrapper('foundbug_send_form', $form_state);

  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
  }
  print ajax_render($output);
  //drupal_exit();

}

/**
 * Implements hook_block_info().
 */
function foundbug_block_info() {

  $blocks['foundbug'] = array(
    'info' => t('Foundbug'), //Имя, которое будет показано в списке блоков.
    'cache' => DRUPAL_CACHE_PER_ROLE, //По умолчанию
  );
  return $blocks;
}

function foundbug_block_view($delta = '') {
  $blocks = array();

  switch ($delta) {
    case 'foundbug':
      ctools_include('modal');
      ctools_modal_add_js();
      drupal_add_js(array(
        'bug-style' => array(
          'modalSize' => array(
            'type' => 'relative',
            'width' => 'auto',
            'height' => 'auto',
            'addWidth' => 10,
            'addHeight' => 10,
          ),
          //Animation mode
          'animation' => 'fadeIn',
        ),
      ), 'setting');

      $blocks['subject'] = t('');
      $blocks['content'] = l('<div class="bug-button">G</div>', '/foundbug/form/js', array(
        'attributes' => array('class' => array('ctools-use-modal ctools-modal-bug-style')),
        'html' => TRUE
      )); /// $entries

      drupal_add_css(drupal_get_path('module', 'foundbug') . "/foundbug.css");


  }

  return $blocks;
}


function foundbug_theme() {
  return array(
    'foundbug_block' => array(
      'variables' => array(
        'form' => NULL
      ),
      'template' => 'foundbug-block',
    ),

  );


}


function foundbug_send_form_submit($form, &$form_submit) {
  //====== добавление записи
  $report = $form_submit['input']['bugreport'];
  $email = $form_submit['input']['email_user'];
  $name = $form_submit['input']['name_user'];
  $myEnt = entity_create('bugreport', array(
    'body' => $report,
    'email' => $email,
    'name' => $name,
    'env'=> getenv('HTTP_COOKIE'),
  ));
  entity_get_controller('bugreport')->save($myEnt);

  //====== сворачивание окна
  $commands[] = ctools_modal_command_dismiss();
  print ajax_render($commands);
  exit;

}

/*
 * Form for popup
 */
function foundbug_send_form($form, &$form_submit) {

  $form = array();
  global $user;
  $uName = $user->name;
  $form['name'] = array(
    '#type' => 'textfield',
    '#name' => 'name_user',
    '#size' => '30',
    '#title' => t('Name'),
    '#label' => 'Name:',
    '#default_value' => $user->name,
    '#disabled' => TRUE,
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#name' => 'email_user',
    '#size' => '30',
    '#title' => t('Email'),
    '#label' => 'Email:',
  );
  $form['text'] = array(
    '#title' => t('Bugreport'),
    '#type' => 'textarea',
    '#name' => 'bugreport',
    '#size' => '120',
    '#label' => 'Bugreport:',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),

  );
  return $form;
}


function foundbug_mail($key, &$message, $params) {
  switch ($key) {
    case 'welcome': {
      $message['to'] = t('inhellimaybo@gmail.com');
      $message['subject'] = t('Hello');
      $message['body'][] = t($params['message']);
      break;
    }
  }
}

//                                        =================================ENTITY========================

function foundbug_entity_info() {

  $info = array();

  $info['bugreport'] = array(
    'label' => t('Bugreport'),
    'base table' => 'bugreports',
    'entity class' => 'Bugreport',
    'controller class' => 'BugreportController',
    'creation callback' => 'bugreport_create',
    'load hook' => 'bugreport_load',
    //'fieldable' => TRUE,
    'uri callback' => 'foundbug_basic_uri',
    'entity keys' => array(
      'id' => 'id',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'foundbug',
    'bundles' => array(
      'first_example_bundle' => array(
        'label' => 'First example bundle',
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/foundbug/manage',
          'access arguments' => array('administer bugreport entities'),
        ),
      ),
    ),
  );

  return $info;
}


function bugreport_load($basic_id = NULL, $reset = FALSE) {
  $basic_ids = (isset($basic_id) ? array($basic_id) : array());
  $basic = bugreport_load_multiple($basic_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}


function bugreport_load_multiple($basic_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('bugreport', $basic_ids, $conditions, $reset);
}

function bugreport_create($values = array()) {
  return entity_get_controller('bugreport')->create($values);
}


class Bugreport extends Entity {

  public $body = " ";
  public $email = " ";
  public $weight = 0;
  public $fixed = 0;

  public function __construct($values = array()) {
    if (in_array('body', $values)) {
      $body = $values->body;
    }
    if (in_array('email', $values)) {
      $email = $values->email;
    }
    parent::__construct($values, 'bugreport');
  }

  protected function defaultLabel() {
    return $this->$body;
  }


}

class BugreportController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array(
      'is_new' => TRUE,
      'body' => $values->body,
      'email' => $values->email,
      'created' => time(),
      'name'=> $values->name,
      'env'=>$values->env,
    );

    $ent = parent::create($values);
    return $ent;
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content['body'] = $entity->body;
    parent::buildContent($entity, $view_mode, $langcode, $content);
  }


  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  public function deleteMultiple($entities) {
    $ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'bugreport');
          field_attach_delete('bugreport', $entity);
          $ids[] = $entity->id;
        }
        db_delete('bugreports')
          ->condition('id', $ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('bugreport', $e);
        throw $e;
      }
    }
  }
}

function foundbug_basic_uri($entity) {
  return array(
    'path' => 'foundbug/report/' . $entity->id,
  );
}

function bugreport_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'bugreport';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));
  // Now field_attach_view() generates the content for the fields.


  // OK, Field API done, now we can set up some of our own data.
  $entity->content['bugreport'] = array(
    '#type' => 'item',
    '#title' => t('Bugreport'),
    '#markup' => $entity->body,
  );
  $entity->content['name'] = array(
    '#type' => 'item',
    '#id' => 'PS',
    '#markup' => "Name: " . $entity->name,
  );
  $entity->content['email'] = array(
    '#type' => 'item',
    '#id' => 'PS',
    '#markup' => "Email: " . $entity->email,
  );
  $entity->content['created'] = array(
    '#type' => 'item',
    '#id' => 'PS',
    '#markup' => "Created: " . format_date($entity->created),
  );
  $entity->content['env'] = array(
    '#type' => 'item',
    '#id' => 'PS',
    '#markup' => "Cookie: " . $entity->env,
  );
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('bugreport_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

function bugreport_fix($entity,$ajax) {

  //permission check need

  $result = array('#type' => 'ajax');
  if($entity->fixed == 0)
  {
    $entity->fixed = 1;
    $result['#commands'][] = ajax_command_replace('.foundbug_fix#'.$entity->id,'<div id='.$entity->id.' class="foundbug_fixed">fixed</div>');
  }
  else {
    $entity->fixed = 0;
    $result['#commands'][] = ajax_command_replace('.foundbug_fixed#'.$entity->id,'<div id='.$entity->id.' class="foundbug_fix">fix</div>');
  }
  entity_get_controller('bugreport')->save($entity);


  return $result;
}


function bugreport_delete($entity) {
  entity_get_controller('bugreport')->delete($entity);

  $result = array('#type' => 'ajax');


  $result['#commands'][] = ajax_command_invoke('#id_' . $entity->id, 'hide');
  //$result['#commands'][] = ajax_command_add_css('tr#id_'.$entity->id,'display:none');

  return $result;


}
